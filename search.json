[{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/calibrate-aeme.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Calibrate AEME","text":"First, load AEME aemetools package: Create folder running example calibration setup.","code":"library(AEME) library(aemetools) tmpdir <- \"calib-test\" dir.create(tmpdir, showWarnings = FALSE) aeme_dir <- system.file(\"extdata/lake/\", package = \"AEME\") # Copy files from package into tempdir file.copy(aeme_dir, tmpdir, recursive = TRUE) #> [1] TRUE path <- file.path(tmpdir, \"lake\")  list.files(path, recursive = TRUE) #>  [1] \"aeme.yaml\"            \"data/catchment.dbf\"   \"data/catchment.prj\"   #>  [4] \"data/catchment.shp\"   \"data/catchment.shx\"   \"data/hypsograph.csv\"  #>  [7] \"data/inflow_FWMT.csv\" \"data/lake.dbf\"        \"data/lake.prj\"        #> [10] \"data/lake.shp\"        \"data/lake.shx\"        \"data/lake_obs.csv\"    #> [13] \"data/meteo.csv\"       \"data/outflow.csv\"     \"data/water_level.csv\" #> [16] \"model_controls.csv\""},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/calibrate-aeme.html","id":"build-aeme-ensemble","dir":"Articles","previous_headings":"","what":"Build AEME ensemble","title":"Calibrate AEME","text":"Using AEME functions, build AEME model setup. example, use glm_aed model. build_ensemble function Run model ensemble using run_aeme function make sure current model setup working. Simple plots surface bottom water temperarure lake level running AEME glm_aed model.","code":"aeme_data <- yaml_to_aeme(path = path, \"aeme.yaml\") mod_ctrls <- read.csv(file.path(path, \"model_controls.csv\")) inf_factor = c(\"dy_cd\" = 1, \"glm_aed\" = 1, \"gotm_wet\" = 1) outf_factor = c(\"dy_cd\" = 1, \"glm_aed\" = 1, \"gotm_wet\" = 1) model <- c(\"glm_aed\") aeme_data <- build_ensemble(path = path, aeme_data = aeme_data,                             model = model, mod_ctrls = mod_ctrls,                             inf_factor = inf_factor, ext_elev = 5,                             use_bgc = FALSE) aeme_data <- run_aeme(aeme_data = aeme_data, model = model,                       verbose = FALSE, mod_ctrls = mod_ctrls,                       path = path) #> Running models... (Have you tried parallelizing?) [2024-02-01 01:55:55] #> GLM-AED run successful! [2024-02-01 01:55:55] #> Model run complete![2024-02-01 01:55:55] #> Retrieving and formatting temp for model glm_aed #> Retrieving and formatting salt for model glm_aed plot(aeme_data)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/calibrate-aeme.html","id":"load-parameters-to-be-used-for-the-calibration","dir":"Articles","previous_headings":"","what":"Load parameters to be used for the calibration","title":"Calibrate AEME","text":"Parameters loaded aemetools package within aeme_parameters dataframe. parameters stored data frame following columns: model: model name file: file name model parameter file name: parameter name value: parameter value min: minimum value parameter max: maximum value parameter Parameters used calibration. (man) dataframe can modified change parameter values. example, can change light/Kw parameter glm_aed model 0.1: dataframe can passed run_aeme_param function run AEME parameter values specified dataframe. function different run_aeme function return aeme_data object, model output generate within lake folder.","code":"utils::data(\"aeme_parameters\", package = \"aemetools\") aeme_parameters #>       model          file                               name       value   min #> 1   glm_aed      glm3.nml                           light/Kw 5.81166e-01 1e-01 #> 2   glm_aed           met                         MET_wndspd 1.14374e+00 7e-01 #> 3   glm_aed           met                         MET_radswd 9.66115e-01 7e-01 #> 4   glm_aed           wdr                            outflow 1.00000e+00 5e-01 #> 5  gotm_wet     gotm.yaml        turbulence/turb_param/k_min 6.32000e-07 1e-09 #> 6  gotm_wet     gotm.yaml light_extinction/g2/constant_value 2.00000e-01 5e-02 #> 7  gotm_wet           met                         MET_wndspd 1.06917e+00 7e-01 #> 8  gotm_wet           met                         MET_radswd 1.17340e+00 7e-01 #> 9  gotm_wet           wdr                            outflow 1.00000e+00 5e-01 #> 10    dy_cd           cfg     light_extinction_coefficient/7 9.00000e-01 1e-01 #> 11    dy_cd dyresm3p1.par           vertical_mixing_coeff/15 2.00000e+02 5e+01 #> 12    dy_cd           met                         MET_wndspd 1.00000e+00 7e-01 #> 13    dy_cd           met                         MET_radswd 1.00000e+00 7e-01 #> 14    dy_cd           wdr                            outflow 1.00000e+00 5e-01 #>         max       module description default #> 1  5.52e+00 hydrodynamic          NA      NA #> 2  1.30e+00 hydrodynamic          NA      NA #> 3  1.30e+00 hydrodynamic          NA      NA #> 4  2.50e+00 hydrodynamic          NA      NA #> 5  1.00e-05 hydrodynamic          NA      NA #> 6  2.70e+00 hydrodynamic          NA      NA #> 7  1.30e+00 hydrodynamic          NA      NA #> 8  1.30e+00 hydrodynamic          NA      NA #> 9  2.50e+00 hydrodynamic          NA      NA #> 10 1.40e+00 hydrodynamic          NA      NA #> 11 7.50e+02 hydrodynamic          NA      NA #> 12 1.30e+00 hydrodynamic          NA      NA #> 13 1.30e+00 hydrodynamic          NA      NA #> 14 2.50e+00 hydrodynamic          NA      NA aeme_parameters[aeme_parameters$model == \"glm_aed\" &                   aeme_parameters$name == \"light/Kw\", \"value\"] <- 0.1 aeme_parameters #>       model          file                               name       value   min #> 1   glm_aed      glm3.nml                           light/Kw 1.00000e-01 1e-01 #> 2   glm_aed           met                         MET_wndspd 1.14374e+00 7e-01 #> 3   glm_aed           met                         MET_radswd 9.66115e-01 7e-01 #> 4   glm_aed           wdr                            outflow 1.00000e+00 5e-01 #> 5  gotm_wet     gotm.yaml        turbulence/turb_param/k_min 6.32000e-07 1e-09 #> 6  gotm_wet     gotm.yaml light_extinction/g2/constant_value 2.00000e-01 5e-02 #> 7  gotm_wet           met                         MET_wndspd 1.06917e+00 7e-01 #> 8  gotm_wet           met                         MET_radswd 1.17340e+00 7e-01 #> 9  gotm_wet           wdr                            outflow 1.00000e+00 5e-01 #> 10    dy_cd           cfg     light_extinction_coefficient/7 9.00000e-01 1e-01 #> 11    dy_cd dyresm3p1.par           vertical_mixing_coeff/15 2.00000e+02 5e+01 #> 12    dy_cd           met                         MET_wndspd 1.00000e+00 7e-01 #> 13    dy_cd           met                         MET_radswd 1.00000e+00 7e-01 #> 14    dy_cd           wdr                            outflow 1.00000e+00 5e-01 #>         max       module description default #> 1  5.52e+00 hydrodynamic          NA      NA #> 2  1.30e+00 hydrodynamic          NA      NA #> 3  1.30e+00 hydrodynamic          NA      NA #> 4  2.50e+00 hydrodynamic          NA      NA #> 5  1.00e-05 hydrodynamic          NA      NA #> 6  2.70e+00 hydrodynamic          NA      NA #> 7  1.30e+00 hydrodynamic          NA      NA #> 8  1.30e+00 hydrodynamic          NA      NA #> 9  2.50e+00 hydrodynamic          NA      NA #> 10 1.40e+00 hydrodynamic          NA      NA #> 11 7.50e+02 hydrodynamic          NA      NA #> 12 1.30e+00 hydrodynamic          NA      NA #> 13 1.30e+00 hydrodynamic          NA      NA #> 14 2.50e+00 hydrodynamic          NA      NA run_aeme_param(aeme_data = aeme_data, param = aeme_parameters,                  model = model, path = path, mod_ctrls = mod_ctrls) #> Running models... (Have you tried parallelizing?) [2024-02-01 01:56:06] #> GLM-AED run successful! [2024-02-01 01:56:07] #> Model run complete![2024-02-01 01:56:07]"},{"path":[]},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/calibrate-aeme.html","id":"define-fitness-function","dir":"Articles","previous_headings":"Calibration setup","what":"Define fitness function","title":"Calibrate AEME","text":"First, define function calibration function use calculate fitness model. function takes dataframe argument. dataframe contains observed data (obs) modelled data (model). function return single value. use root mean square error (RMSE) fitness function: \\[\\text{RMSE}(y, \\hat{y}) = \\sqrt{\\frac{\\sum_{=0}^{N - 1} (y_i - \\hat{y}_i)^2}{N}}\\] Different functions can applied different variables. example, can use RMSE lake level mean absolute error (MAE) water temperature: combined named list functions passed calib_aeme function. named according target variable.","code":"# Function to calculate fitness rmse <- function(df) {   sqrt(mean((df$obs - df$model)^2)) } # Function to calculate fitness mae <- function(df) {   mean(abs(df$obs - df$model)) } # Create list of functions FUN_list <- list(HYD_temp = mae, LKE_lvlwtr = rmse)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/calibrate-aeme.html","id":"define-control-parameters","dir":"Articles","previous_headings":"Calibration setup","what":"Define control parameters","title":"Calibrate AEME","text":"Next, define control parameters calibration. control parameters passed calib_aeme function. control parameters follows: VTR: value reach. calibration stop fitness value less equal value. example NP: number individuals population. Best practice use 10 times number parameters. itermax: maximum number iterations run calibration . calibration stop number iterations reached. number generations used equal itermax / NP. Therefore, adjusting NP itermax number generations can adjusted. reltol: relative tolerance calibration. calibration stop relative change fitness value less value. p: quantile used select parents next generation. example, p = 0.25, best 25% population used parents next generation. mutate: mutation rate calibration. probability parameter mutated. parallel: Whether run calibration parallel. decrease time taken run calibration. out_file: file write calibration results . na_value: value use missing values observed predicted data. used indicate model crashes can easily removed calibration results. ncore: number cores use calibration. used parallel = TRUE. example control parameters:","code":"ctrl <- list(VTR = 1, NP = 40, itermax = 400, reltol = 0.07, cutoff = 0.25,              mutate = 0.1, parallel = TRUE, out_file = \"results.csv\",              na_value = 999, ncore = 2L)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/calibrate-aeme.html","id":"define-variables","dir":"Articles","previous_headings":"Calibration setup","what":"Define variables","title":"Calibrate AEME","text":"Next select variables use calibration. variables selected need use AEME variable definition e.g. c(\"HYD_temp\", \"LKE_lvlwtr\"). Weights need attributed variables. weights used scale fitness value. can helpful variables different units. example, temperature degrees Celsius water level metres, water level much larger impact fitness value. Therefore, weight water level much smaller weight temperature. weights specified named vector. names vector variable names.","code":"vars_sim <- c(\"HYD_temp\") weights <- c(\"HYD_temp\" = 1)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/calibrate-aeme.html","id":"run-calibration","dir":"Articles","previous_headings":"","what":"Run calibration","title":"Calibrate AEME","text":"defined fitness function, control parameters variables, can run calibration. calib_aeme function takes following arguments: aeme_data: aeme_data object use calibration. path: path lake folder. param: parameters calibrate. model: model calibrate. mod_ctrls: model controls use calibration. FUN_list: list functions use variable within calibration. ctrl: control parameters use calibration. vars_sim: variables use calibration. weights: weights use calibration. calib_aeme function writes calibration results file specified generation. allows calibration stopped restarted time. calib_aeme function returns ctrl object updated values.","code":"ctrl <- calib_aeme(aeme_data = aeme_data, path = path,                    param = aeme_parameters, model = model,                    mod_ctrls = mod_ctrls, FUN_list = FUN_list, ctrl = ctrl,                    vars_sim = vars_sim, weights = weights) #> Extracting indices for modelled variables [2024-02-01 01:56:07] #> Complete! [2024-02-01 01:56:08] #> Calibrating in parallel using 1 cores... #> Starting generation 1/10, 40 members. [2024-02-01 01:56:08] #>        light.Kw MET_wndspd MET_radswd outflow #> mean      2.806     1.0010     0.9997  1.4980 #> median    2.834     1.0010     0.9955  1.4800 #> sd        1.582     0.1753     0.1750  0.5829 #> Best fit: 2.168 (sd: 220.352) #>             Parameters: [0.642, 0.993, 1.094, 0.87] #> Writing output for generation 1 to results.csv. [2024-02-01 01:56:48] #> Survival rate: 1 #> Starting generation 2/10, 40 members. [2024-02-01 01:56:48] #>        light.Kw MET_wndspd MET_radswd outflow #> mean      2.980      1.052     1.0720  0.9730 #> median    3.114      1.067     1.0770  0.9344 #> sd        1.431      0.187     0.1229  0.3639 #> Writing output for generation 2 to results.csv. [2024-02-01 01:57:28] #> Best fit: 2.1273 (sd: 122.91) #> Survival rate: 1 #> Starting generation 3/10, 40 members. [2024-02-01 01:57:28] #>        light.Kw MET_wndspd MET_radswd outflow #> mean      2.286     1.0300    1.06600  1.0020 #> median    2.546     1.0100    1.08100  0.9677 #> sd        1.475     0.1396    0.08286  0.2604 #> Writing output for generation 3 to results.csv. [2024-02-01 01:58:08] #> Best fit: 2.1273 (sd: 99.967) #> Survival rate: 1 #> Starting generation 4/10, 40 members. [2024-02-01 01:58:08] #>        light.Kw MET_wndspd MET_radswd outflow #> mean     1.0680     1.1200    1.08500  1.0930 #> median   0.7985     1.1470    1.08900  1.0490 #> sd       1.1760     0.1367    0.05846  0.2431 #> Writing output for generation 4 to results.csv. [2024-02-01 01:58:47] #> Best fit: 2.1167 (sd: 84.124) #> Survival rate: 1 #> Starting generation 5/10, 40 members. [2024-02-01 01:58:47] #>        light.Kw MET_wndspd MET_radswd outflow #> mean     0.7210     1.1720    1.10500  1.1020 #> median   0.5260     1.1950    1.12100  1.0480 #> sd       0.7202     0.1156    0.08668  0.2491 #> Writing output for generation 5 to results.csv. [2024-02-01 01:59:26] #> Best fit: 2.1167 (sd: 118.66) #> Survival rate: 1 #> Starting generation 6/10, 40 members. [2024-02-01 01:59:26] #>        light.Kw MET_wndspd MET_radswd outflow #> mean     0.7642     1.1260     1.1270  1.0820 #> median   0.4270     1.1430     1.1540  1.0370 #> sd       1.1860     0.1499     0.1089  0.2872 #> Writing output for generation 6 to results.csv. [2024-02-01 02:00:06] #> Best fit: 2.1167 (sd: 106.18) #> Survival rate: 1 #> Starting generation 7/10, 40 members. [2024-02-01 02:00:06] #>        light.Kw MET_wndspd MET_radswd outflow #> mean     0.7125     1.1800    1.15900  1.1230 #> median   0.3763     1.1840    1.16500  1.0590 #> sd       1.1050     0.1055    0.06958  0.2687 #> Writing output for generation 7 to results.csv. [2024-02-01 02:00:46] #> Best fit: 2.1123 (sd: 118.66) #> Survival rate: 1 #> Starting generation 8/10, 40 members. [2024-02-01 02:00:46] #>        light.Kw MET_wndspd MET_radswd outflow #> mean     0.5743     1.1640     1.1690  1.0800 #> median   0.3390     1.2000     1.1950  1.0710 #> sd       0.9883     0.1202     0.1153  0.2407 #> Writing output for generation 8 to results.csv. [2024-02-01 02:01:26] #> Best fit: 2.1098 (sd: 99.966) #> Survival rate: 1 #> Starting generation 9/10, 40 members. [2024-02-01 02:01:26] #>        light.Kw MET_wndspd MET_radswd outflow #> mean     0.6716     1.1140    1.20900  1.1090 #> median   0.3216     1.1020    1.22900  1.0320 #> sd       1.1410     0.1444    0.09668  0.3497 #> Writing output for generation 9 to results.csv. [2024-02-01 02:02:06] #> Best fit: 2.1088 (sd: 128.35) #> Survival rate: 1 #> Starting generation 10/10, 40 members. [2024-02-01 02:02:06] #>        light.Kw MET_wndspd MET_radswd outflow #> mean     0.5835     1.1350     1.2260  1.0410 #> median   0.2878     1.1570     1.2370  0.9666 #> sd       1.0310     0.1455     0.0896  0.2947 #> Writing output for generation 10 to results.csv. [2024-02-01 02:02:46] #> Best fit: 2.1072 (sd: 111.45) #> Survival rate: 1"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/calibrate-aeme.html","id":"visualise-calibration-results","dir":"Articles","previous_headings":"","what":"Visualise calibration results","title":"Calibrate AEME","text":"calibrations results can read using read_calib function. function takes following arguments: ctrl: control parameters used calibration. model: model used calibration. read_calib function returns dataframe calibration results. calibration results include model, generation, index (model run), parameter name, parameter value, fitness value median fitness value generation. results can visualised using plot_calib function. function takes following arguments: calib: calibration results read using read_calib function. model: model used calibration. ctrl: control parameters used calibration. returns list ggplot objects: dotty plot, density plot convergence plot.","code":"calib_res <- read_calib(ctrl = ctrl, model = model, path = path) plist <- plot_calib(calib = calib_res, model = model,                        na_value = ctrl$na_value)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/calibrate-aeme.html","id":"dotty-plot","dir":"Articles","previous_headings":"Visualise calibration results","what":"Dotty plot","title":"Calibrate AEME","text":"can used comparing sensitivity across parameters. dotty plot shows fitness value parameter value generation. fitness value y-axis parameter value x-axis. faceted parameter name. parameter values coloured generation. best fitness value generation shown black line red dot.","code":"plist$dotty"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/calibrate-aeme.html","id":"histogram-plot","dir":"Articles","previous_headings":"Visualise calibration results","what":"Histogram plot","title":"Calibrate AEME","text":"useful comparing distribution parameter values across generations. histogram plot shows frequency parameter values generation. parameter values x-axis density y-axis. faceted parameter name. parameter converging value, histogram show peak around value. parameter converging value, histogram show flat distribution.","code":"plist$hist"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/calibrate-aeme.html","id":"convergence-plot","dir":"Articles","previous_headings":"Visualise calibration results","what":"Convergence plot","title":"Calibrate AEME","text":"generally used assessing model convergence. convergence plot shows values use iterations. parameter value y-axis iteration x-axis. faceted parameter name. parameter values coloured generation. best fitness value generation shown solid horizontal black line.","code":"plist$convergence"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/download-era5.html","id":"download-nz-point-meteorological-data","dir":"Articles","previous_headings":"","what":"Download NZ point meteorological data","title":"Download ERA5 data","text":"Currently, ERA5-Land data (~9km grid spacing) archived New Zealand (166.5/-46.6/178.6/-34.5) time period 1980-2022 main meteorological variables (air temperature, dewpoint temperature, wind u-vector 10m, wind v-vector 10m, total precipitation, snowfall, surface level pressure, downwelling shortwave radiation, downwelling longwave radiation) required drive hydrological hydrodynamic models. can easily downloaded using example . parallel switch allows use multiple cores computer speed download.","code":"library(aemetools) lon <- 176.2717 lat <- -38.079 variables <- c(\"MET_tmpair\", \"MET_pprain\")  met <- get_era5_point(lat = lat, lon = lon, years = 2000:2001,                       variables = variables, format = \"aeme\", parallel = FALSE) #> Point is in the grid. #> Downloading ERA5 variables... [2024-02-01 02:03:00] (Have you tried parallelising?) #> Finished downloading ERA5 variables! [2024-02-01 02:03:16] summary(met) #>       Date              MET_tmpair       MET_pprain      #>  Min.   :2000-01-01   Min.   : 3.983   Min.   : 0.0000   #>  1st Qu.:2000-07-01   1st Qu.: 9.594   1st Qu.: 0.2037   #>  Median :2000-12-30   Median :12.509   Median : 2.0076   #>  Mean   :2000-12-30   Mean   :12.391   Mean   : 6.8159   #>  3rd Qu.:2001-06-30   3rd Qu.:15.299   3rd Qu.: 8.4171   #>  Max.   :2001-12-30   Max.   :20.396   Max.   :92.9834"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Sensitivity Analysis","text":"First, load AEME aemetools package: Create folder running example calibration setup.","code":"library(AEME) library(aemetools) tmpdir <- \"sa-test\" dir.create(tmpdir, showWarnings = FALSE) aeme_dir <- system.file(\"extdata/lake/\", package = \"AEME\") # Copy files from package into tempdir file.copy(aeme_dir, tmpdir, recursive = TRUE) #> [1] TRUE path <- file.path(tmpdir, \"lake\")  list.files(path, recursive = TRUE) #>  [1] \"aeme.yaml\"            \"data/catchment.dbf\"   \"data/catchment.prj\"   #>  [4] \"data/catchment.shp\"   \"data/catchment.shx\"   \"data/hypsograph.csv\"  #>  [7] \"data/inflow_FWMT.csv\" \"data/lake.dbf\"        \"data/lake.prj\"        #> [10] \"data/lake.shp\"        \"data/lake.shx\"        \"data/lake_obs.csv\"    #> [13] \"data/meteo.csv\"       \"data/outflow.csv\"     \"data/water_level.csv\" #> [16] \"model_controls.csv\""},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"build-aeme-ensemble","dir":"Articles","previous_headings":"","what":"Build AEME ensemble","title":"Sensitivity Analysis","text":"Using AEME functions, build AEME model setup. example, use glm_aed model. build_ensemble function ","code":"aeme_data <- yaml_to_aeme(path = path, \"aeme.yaml\") mod_ctrls <- read.csv(file.path(path, \"model_controls.csv\")) inf_factor = c(\"dy_cd\" = 1, \"glm_aed\" = 1, \"gotm_wet\" = 1) outf_factor = c(\"dy_cd\" = 1, \"glm_aed\" = 1, \"gotm_wet\" = 1) model <- c(\"glm_aed\") aeme_data <- build_ensemble(path = path, aeme_data = aeme_data,                             model = model, mod_ctrls = mod_ctrls,                             inf_factor = inf_factor, ext_elev = 5,                             use_bgc = TRUE)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"description-of-sensitivity-analysis-method","dir":"Articles","previous_headings":"","what":"Description of Sensitivity Analysis method","title":"Sensitivity Analysis","text":"sensitivity analysis method used based Sobol method uses sensobol package. package provides several functions conduct variance-based uncertainty sensitivity analysis, estimation sensitivity indices visual representation results. implements several state---art first total-order estimators allows computation fourth-order effects, well approximation error, swift user-friendly way. information method, see sensobol package vignette.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"load-parameters-to-be-used-for-the-sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Load parameters to be used for the sensitivity analysis","title":"Sensitivity Analysis","text":"Parameters loaded aemetools package within aeme_parameters dataframe. parameters stored data frame following columns: model: model name file: file name model parameter file name: parameter name value: parameter value min: minimum value parameter max: maximum value parameter Parameters used calibration. (man)","code":"utils::data(\"aeme_parameters\", package = \"aemetools\") param <- aeme_parameters |>   dplyr::filter(file != \"wdr\") param"},{"path":[]},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"define-fitness-function","dir":"Articles","previous_headings":"Sensitivity analysis setup","what":"Define fitness function","title":"Sensitivity Analysis","text":"First, define function sensitivity analysis function use calculate sensitivity model. function takes dataframe argument. dataframe contains observed data (obs) modelled data (model). function return single value. use model mean. Different functions can applied different variables. example, can use mean water temperature median chloophyll-. combined named list functions passed sa_aeme function. named according target variable.","code":"# Function to calculate fitness fit <- function(df) {   mean(df$model) } # Function to calculate fitness fit2 <- function(df) {   median(df$model) } # Create list of functions FUN_list <- list(HYD_temp = fit, PHY_tchla = fit2)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"define-control-parameters","dir":"Articles","previous_headings":"Sensitivity analysis setup","what":"Define control parameters","title":"Sensitivity Analysis","text":"Next, define control parameters sensitivity analysis. control parameters passed sa_aeme function. control parameters follows: N: initial sample size base sample matrix. ncore: number cores use calibration. used parallel = TRUE. Default parallel::detectCores() - 1. na_value: value replace NA value returned. parallel: Logical value. TRUE, sensitivity analysis run parallel. FALSE, run series. out_file: character string naming file writing. Currently can write .csv file database (.db; using duckDB package) file. writing database, creates table named “sa_output”. vars_sim: named list output variables sensitivity analysis. name user defined list must contain: var: variable name use sensitivity analysis. month: vector months use sensitivity analysis. depth_range: vector length 2 minimum maximum depth range use sensitivity analysis. example examining surface temperature (surf_temp) months December February, bottom temperature (bot_temp), (10 - 13 m) also total chlorophyll-(PHY_tchla) surface (0 - 2 m) summer period.","code":"ctrl <- list(N = 2^4, ncore = 10, na_value = 999, parallel = TRUE,              out_file = \"results.csv\",              vars_sim = list(                surf_temp = list(var = \"HYD_temp\",                                 month = c(12, 1:2),                                 depth_range = c(0, 2) # change to depth_range                ),                bot_temp = list(var = \"HYD_temp\",                                month = c(12, 1:2),                                depth_range = c(10, 13)                ),                surf_chla = list(var = \"PHY_tchla\",                               month = c(12, 1:2),                               depth_range = c(0, 2)                )              ) )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"run-sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Run sensitivity analysis","title":"Sensitivity Analysis","text":"defined fitness function, control parameters variables, can run sensitivity analysis. sa_aeme function takes following arguments: aeme; data object. filepath; input files located relative 'config'. dataframe; parameters read csv file. Requires columns c(\"model\", \"file\", \"name\", \"value\", \"min\", \"max\", \"log\") string; model. Options c(\"dy_cd\", \"glm_aed\" \"gotm_wet\") dataframe; configuration loaded \"mod_ctrls.csv\". list functions; named according variables vars_sim. Funtions form ⁠function(df)⁠ used calculate model fit. NULL, uses mean absolute error (MAE). list; controls calibration function. control parameters follows: N: initial sample size base sample matrix. ncore: number cores use calibration. used parallel = TRUE. Default parallel::detectCores() - 1. na_value: value replace NA value returned. parallel: Logical value. TRUE, sensitivity analysis run parallel. FALSE, run series. out_file: character string naming file writing. Currently can write .csv file database (.db; using duckDB package) file. writing database, creates table named \"sa_output\". vars_sim: named list output variables sensitivity analysis. name user defined list must contain: var: variable name use sensitivity analysis. month: vector months use sensitivity analysis. depth_range: vector length 2 minimum maximum depth range use sensitivity analysis. dataframe; parameters read csv file. Requires columns c(\"model\", \"file\", \"name\", \"value\", \"min\", \"max\"). sa_aeme function writes results file specified. sa_aeme function returns ctrl object updated values.","code":"?sa_aeme # Run sensitivity analysis AEME model ctrl <- sa_aeme(aeme_data = aeme_data, path = path, param = param,                 model = model, ctrl = ctrl, mod_ctrls = mod_ctrls,                 FUN_list = FUN_list) #> Extracting indices for modelled variables [2024-02-01 02:03:26] #> Complete! [2024-02-01 02:03:32] #> Running sensitivity analysis in parallel using 1 cores with 80 parameter sets [2024-02-01 02:03:32] #>        light.Kw MET_wndspd MET_radswd #> mean      2.715     0.9960     1.0050 #> median    2.641     0.9906     1.0000 #> sd        1.488     0.1592     0.1635 #> Complete! [2024-02-01 02:11:39]"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"reading-sensitivity-analysis-results","dir":"Articles","previous_headings":"","what":"Reading sensitivity analysis results","title":"Sensitivity Analysis","text":"sensitivity results can read using read_sa function. function takes following arguments: ctrl: control parameters used sensitivity analysis. model: model used sensitivity analysis. path: path directory model configuration . read_sa function returns list : df: dataframe sensitivity analysis results. dataframe contains model, generation, index (model run), parameter name, parameter value, fitness value median fitness value generation. sobol_indices: list Sobol indices variable ’s senstivity parameters. sobol_dummy: list Sobol indices dummy parameter.","code":"# Read in sensitivity analysis results sa_res <- read_sa(ctrl = ctrl, model = model, path = path) names(sa_res) #> [1] \"df\"                  \"sobol_indices\"       \"sobol_dummy_indices\" head(sa_res$df) sa_res$sobol_indices #> $surf_temp #>  #> First-order estimator: saltelli | Total-order estimator: jansen  #>  #> Total number of model runs: 80  #>  #> Sum of first order indices: 30.59197  #>      original        bias std.error     low.ci   high.ci sensitivity parameters #>         <num>       <num>     <num>      <num>     <num>      <char>     <char> #> 1:  7.9092602 -0.89381398 7.4042080 -5.7089069 23.315055          Si   light.Kw #> 2: 14.3556479 -1.66257023 9.5375202 -2.6749779 34.711414          Si MET_wndspd #> 3:  8.3270625 -3.11961669 6.1196018 -0.5475199 23.440878          Si MET_radswd #> 4:  1.1783201 -0.09794314 0.3368310  0.6160867  1.936440          Ti   light.Kw #> 5:  1.0220628  0.13272679 0.1777983  0.5408577  1.237814          Ti MET_wndspd #> 6:  0.6787155 -0.19680316 0.2178823  0.4484772  1.302560          Ti MET_radswd #>  #> $bot_temp #>  #> First-order estimator: saltelli | Total-order estimator: jansen  #>  #> Total number of model runs: 80  #>  #> Sum of first order indices: 137.613  #>      original         bias  std.error     low.ci    high.ci sensitivity #>         <num>        <num>      <num>      <num>      <num>      <char> #> 1: 51.4957656  8.148920209 26.2309791 -8.0649290 94.7586198          Si #> 2: 40.8271934  7.873226220 17.5149841 -1.3747708 67.2827052          Si #> 3: 45.2900406  4.712409734 23.7478538 -5.9673072 87.1225690          Si #> 4:  1.1981214  0.313002224  0.6141971 -0.3186851  2.0889235          Ti #> 5:  0.6257803  0.002151249  0.1697662  0.2908934  0.9563647          Ti #> 6:  0.8141891 -0.046673098  0.4340855  0.0100703  1.7116540          Ti #>    parameters #>        <char> #> 1:   light.Kw #> 2: MET_wndspd #> 3: MET_radswd #> 4:   light.Kw #> 5: MET_wndspd #> 6: MET_radswd #>  #> $surf_chla #>  #> First-order estimator: saltelli | Total-order estimator: jansen  #>  #> Total number of model runs: 80  #>  #> Sum of first order indices: 0.6516373  #>      original      bias std.error      low.ci    high.ci sensitivity parameters #>         <num>     <num>     <num>       <num>      <num>      <char>     <char> #> 1: 0.22898253 1.1212725 1.2502794  -3.3427925  1.5582125          Si   light.Kw #> 2: 0.39123114 0.6379484 1.6611415  -3.5024947  3.0090601          Si MET_wndspd #> 3: 0.03142365 0.1180194 0.2095534  -0.4973129  0.3241215          Si MET_radswd #> 4: 1.54673730 5.6538305 8.7643492 -21.2849021 13.0707157          Ti   light.Kw #> 5: 0.57668153 3.4445638 7.0200051 -16.6268394 10.8910749          Ti MET_wndspd #> 6: 1.04033561 4.8515843 5.5391970 -14.6678753  7.0453780          Ti MET_radswd sa_res$sobol_dummy #> $surf_temp #>   original         bias  std.error   low.ci  high.ci sensitivity parameters #> 1 1.911686  0.005024562 0.03360058 1.840806 1.972518          Si      dummy #> 2 0.000000 -0.233266740 0.33905422 0.000000 0.000000          Ti      dummy #>  #> $bot_temp #>   original         bias   std.error   low.ci  high.ci sensitivity parameters #> 1 2.049946 -0.003726412 0.004067836 2.045699 2.061645          Si      dummy #> 2 0.000000 -0.058552006 0.206674837 0.000000 0.000000          Ti      dummy #>  #> $surf_chla #>      original        bias   std.error low.ci   high.ci sensitivity parameters #> 1 0.004966016 0.003495219 0.005343265      0 0.0119434          Si      dummy #> 2 0.000000000 0.562314603 0.883574197      0 0.4330351          Ti      dummy"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"visualising-sensitivity-analysis-results","dir":"Articles","previous_headings":"","what":"Visualising sensitivity analysis results","title":"Sensitivity Analysis","text":"sensitivity analysis results can visualised different ways using functions: plot_uncertainty, plot_scatter plot_multiscatter. plots based output plots sensobol package. functions take following argument: sa_res: sensitivity analysis results returned read_sa function.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"uncertainty-plot","dir":"Articles","previous_headings":"Visualising sensitivity analysis results","what":"Uncertainty plot","title":"Sensitivity Analysis","text":"plot_uncertainty function plots distribution model output variable.","code":"# Plot sensitivity analysis results plot_uncertainty(sa_res)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"scatter-plot","dir":"Articles","previous_headings":"Visualising sensitivity analysis results","what":"Scatter plot","title":"Sensitivity Analysis","text":"plot_scatter function plots model output parameter value variable. useful identifying relationships model output parameter value. example, plot shows relationship model surface temperature (surf_temp_) parameter value scaling factor shortwave radiation (MET_radswd), also surface chlorophyll-(surf_chla) light extinction coefficient (light.Kw). low parameter value Kw, model chlorophyll-higher.","code":"plot_scatter(sa_res)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/articles/sensitivity-analysis.html","id":"multi-scatter-plot","dir":"Articles","previous_headings":"Visualising sensitivity analysis results","what":"Multi-scatter plot","title":"Sensitivity Analysis","text":"plot_multiscatter function plots parameters variable. parameter top x-axis parameter y-axis. useful identifying relationships parameters response variable.","code":"pl <- plot_multiscatter(sa_res)  pl[[1]] pl[[2]] pl[[3]]"},{"path":"https://special-enigma-8p9lgre.pages.github.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tadhg Moore. Author, maintainer. Chris McBride. Author.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moore T, McBride C (2024). aemetools: Tools expand Aquatic Ecosystem Model Ensemble Package. R package version 0.0.0.9000, https://studious-enigma-z736ppg.pages.github.io/.","code":"@Manual{,   title = {aemetools: Tools to expand the Aquatic Ecosystem Model Ensemble Package},   author = {Tadhg Moore and Chris McBride},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://studious-enigma-z736ppg.pages.github.io/}, }"},{"path":"https://special-enigma-8p9lgre.pages.github.io/index.html","id":"aemetools-","dir":"","previous_headings":"","what":"aemetools - Improve ecosystem modelling","title":"aemetools - Improve ecosystem modelling","text":"aemetools designed work AEME. contains range functions assist setting simulations new lake site. Currently, can use download meteorological data ERA5-Land point New Zealand 1999-2022, download ERA5-Land netCDF files area world. can set run hydrological simulations using suite models airGR package using catchment, reach lake data.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"aemetools - Improve ecosystem modelling","text":"can install development version aemetools GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"limnotrack/aemetools\")"},{"path":"https://special-enigma-8p9lgre.pages.github.io/index.html","id":"download-nz-point-meteorological-data","dir":"","previous_headings":"Installation","what":"Download NZ point meteorological data","title":"aemetools - Improve ecosystem modelling","text":"Currently, ERA5-Land data (~9km grid spacing) archived New Zealand (166.5/-46.6/178.6/-34.5) time period 1999-2022 main meteorological variables (air temperature, dewpoint temperature, wind u-vector 10m, wind v-vector 10m, total precipitation, snowfall, surface level pressure, downwelling shortwave radiation, downwelling longwave radiation) required drive hydrological hydrodynamic models. can easily downloaded using example . parallel switch allows use multiple cores computer speed download.","code":"library(aemetools)  lon <- 176.2717 lat <- -38.079 variables <- c(\"MET_tmpair\", \"MET_pprain\")  met <- get_era5_point(lat = lat, lon = lon, years = 2000:2001,                       variables = variables, format = \"aeme\", parallel = TRUE) #> Point is in the grid. #> Downloading ERA5 variables in parallel... [2024-01-23 15:51:11] #> Finished downloading ERA5 variables! [2024-01-23 15:51:25] summary(met) #>       Date              MET_tmpair       MET_pprain      #>  Min.   :2000-01-01   Min.   : 3.983   Min.   : 0.0000   #>  1st Qu.:2000-07-01   1st Qu.: 9.594   1st Qu.: 0.2037   #>  Median :2000-12-30   Median :12.509   Median : 2.0076   #>  Mean   :2000-12-30   Mean   :12.391   Mean   : 6.8159   #>  3rd Qu.:2001-06-30   3rd Qu.:15.299   3rd Qu.: 8.4171   #>  Max.   :2001-12-30   Max.   :20.396   Max.   :92.9834"},{"path":"https://special-enigma-8p9lgre.pages.github.io/index.html","id":"run-gr4j-model","dir":"","previous_headings":"Installation","what":"Run GR4J model","title":"aemetools - Improve ecosystem modelling","text":"simple example set one lake inflows Lake Rotorua. First, input model generated using stream ID (nzsegment), spatial features (sf objects) reaches, lake catchment (including sub-catchments), observed discharge (available) meteorological data (air temperature precipitation). recursively creates upstream network using nzsegment, combines subcatchments upstream reaches (sf::st_union()) calculate area catchment.  Within airGR package, calibration algorithms allows calibrate hydrological model discharge data reach available. calibrated parameters can passed run_GR function run selected model.","code":"data_dir <- system.file(\"extdata/hydro/\", package = \"aemetools\") lake <- readRDS(file.path(data_dir, \"lake.rds\")) reaches <- readRDS(file.path(data_dir, \"reaches.rds\")) catchments <- readRDS(file.path(data_dir, \"catchments.rds\")) met <- readRDS(file.path(data_dir, \"met.rds\")) obs_flow <- readRDS(file.path(data_dir, \"obs_flow.rds\")) FUN_MOD <- airGR::RunModel_GR4J id <- 4087861 # nzsegment  inputs <- make_GR_inputs(id = id, reaches = reaches, lake = lake,                          catchments = catchments, obs_flow = obs_flow, met = met,                          lat = lat, FUN_MOD = FUN_MOD,                          plot = TRUE) #> Warning: attribute variables are assumed to be spatially constant throughout #> all geometries #> Warning in make_GR_inputs(id = id, reaches = reaches, lake = lake, catchments = #> catchments, : NA values present. Selecting period with less NA's. #' airGR uses indices to run the model, so first we split our observed data in  #' half (0.5) for calibration and validation periods based on when the  #' observation data starts (which is provided in `inputs$data$start`). idx_spl <- floor(nrow(inputs$data[inputs$start:nrow(inputs$data), ])                  * 0.5) #' Use a model warmup period as everything before when the observations start. warmup <- 1:(inputs$start - 1)  # Set the indices for the calibration period cal_idx <- inputs$start:(idx_spl + inputs$start)  # Run the calibration and assign the output calib <- calib_GR(inputs = inputs, warmup = warmup, run_index = cal_idx) #> Grid-Screening in progress (0% 20% 40% 60% 80% 100%) #>   Screening completed (81 runs) #>       Param =  432.681,   -2.376,   83.096,    2.384 #>       Crit. NSE[Q]       = -12.8326 #> Steepest-descent local search in progress #>   Calibration completed (30 iterations, 289 runs) #>       Param = 21807.299,   -9.151,  104.585,    2.003 #>       Crit. NSE[Q]       = 0.4836  # Extract the calibrated parameters param <- calib$ParamFinalR  # Run the model output <- run_GR(inputs = inputs, param = param,                  warmup = warmup, run_index = cal_idx)  # Plot the output plot(output, Qobs = inputs$data$Qmm[cal_idx])"},{"path":"https://special-enigma-8p9lgre.pages.github.io/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/add_linz_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Add LINZ API key to environment variables — add_linz_key","title":"Add LINZ API key to environment variables — add_linz_key","text":"Add LINZ API key environment variables","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/add_linz_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add LINZ API key to environment variables — add_linz_key","text":"","code":"add_linz_key(key)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/add_linz_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add LINZ API key to environment variables — add_linz_key","text":"key character; LINZ API key. account needed obtain API key. function create_linz_key() open browser window create account obtain API key.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/aeme_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataframe used for calibrating AEME models. — aeme_parameters","title":"Example dataframe used for calibrating AEME models. — aeme_parameters","text":"example dataframe used inputting calibrating AEME models.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/aeme_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataframe used for calibrating AEME models. — aeme_parameters","text":"","code":"aeme_parameters"},{"path":[]},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/aeme_parameters.html","id":"aeme-parameters","dir":"Reference","previous_headings":"","what":"aeme_parameters","title":"Example dataframe used for calibrating AEME models. — aeme_parameters","text":"data frame 17 rows 6 columns: model Model parameter file File parameter stored name Name parameter value Value parameter min Minimum range parameter max Maximum range parameter","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/aeme_parameters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example dataframe used for calibrating AEME models. — aeme_parameters","text":"Package development.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/aeme_parameters_bgc.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataframe used for calibrating the biogeochemistry in the AEME\r\nmodels. — aeme_parameters_bgc","title":"Example dataframe used for calibrating the biogeochemistry in the AEME\r\nmodels. — aeme_parameters_bgc","text":"example dataframe used inputting calibrating AEME models.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/aeme_parameters_bgc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataframe used for calibrating the biogeochemistry in the AEME\r\nmodels. — aeme_parameters_bgc","text":"","code":"aeme_parameters_bgc"},{"path":[]},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/aeme_parameters_bgc.html","id":"aeme-parameters-bgc","dir":"Reference","previous_headings":"","what":"aeme_parameters_bgc","title":"Example dataframe used for calibrating the biogeochemistry in the AEME\r\nmodels. — aeme_parameters_bgc","text":"data frame 30 rows 7 columns: model Model parameter file File parameter stored name Name parameter value Value parameter min Minimum range parameter max Maximum range parameter var Maximum range parameter","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/aeme_parameters_bgc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example dataframe used for calibrating the biogeochemistry in the AEME\r\nmodels. — aeme_parameters_bgc","text":"Package development.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/calib_aeme.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate AEME model parameters using observations — calib_aeme","title":"Calibrate AEME model parameters using observations — calib_aeme","text":"calib_model() runs model compares observations provided. can run parallel using multiple cores availlable computer run quicker.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/calib_aeme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate AEME model parameters using observations — calib_aeme","text":"","code":"calib_aeme(   aeme_data,   path = \".\",   param,   model,   mod_ctrls,   vars_sim = \"HYD_temp\",   FUN_list = NULL,   ctrl = NULL,   weights = c(1),   param_df = NULL )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/calib_aeme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate AEME model parameters using observations — calib_aeme","text":"aeme_data aeme; data object. path filepath; input files located relative `config`. param dataframe; parameters read csv file. Requires columns c(\"model\", \"file\", \"name\", \"value\", \"min\", \"max\", \"log\") model string; model. Options c(\"dy_cd\", \"glm_aed\" \"gotm_wet\") mod_ctrls dataframe; configuration loaded \"mod_ctrls.csv\". vars_sim vector; variables names used calculation model fit. Currently supports using one variable. FUN_list list functions; named according variables vars_sim. Funtions form function(df) used calculate model fit. NULL, uses mean absolute error (MAE). ctrl list; controls calibration function. VTR Value reached. optimization process stop either maximum number iterations itermax reached best parameter vector bestmem found value fn(bestmem) <= VTR. Default -Inf. NP number population members. Defaults NA; user change value NP NA reset 10 * sum(param$model == model). many  problems best set NP least 10 times length parameter vector. itermax maximum iteration (population generation) allowed. Default 200. reltol relative convergence tolerance. algorithm stops unable reduce value factor reltol * (abs(val) + reltol). Default = 0.07 cutoff: quantile cutoff used select parents next generation. example, cutoff = 0.25, best 25% population used parents next generation. mutate fraction population undergo mutation (0-1). parallel boolean; run calibration parallel. Default TRUE out_file filepath; csv calibration output written . Defaults \"results.csv\" na_value value replace NA values observations. Default  ncore: number cores use calibration. used parallel = TRUE. Default parallel::detectCores() - 1. weights vector; weights variable vars_sim. Default c(1). param_df dataframe; parameters read csv file. Requires columns c(\"model\", \"file\", \"name\", \"value\", \"min\", \"max\").","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/calib_aeme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate AEME model parameters using observations — calib_aeme","text":"list; ctrl supplied updated arguments missing.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/calib_GR.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate GR model — calib_GR","title":"Calibrate GR model — calib_GR","text":"Calibrate GR model","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/calib_GR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate GR model — calib_GR","text":"","code":"calib_GR(   inputs,   warmup = NULL,   run_index,   FUN_CRIT = airGR::ErrorCrit_NSE,   FUN_CALIB = airGR::Calibration_Michel,   IniStates = NULL,   IniResLevels = NULL )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/calib_GR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate GR model — calib_GR","text":"inputs list; inputs generated make_GR_inputs(). warmup vector; index inputs$data used warmup period model. run_index vector; index inputs$data used running GR model. FUN_CRIT [function (atomic list)] error criterion function (e.g. ErrorCrit_RMSE, ErrorCrit_NSE) FUN_CALIB (optional) [function] calibration algorithm function (e.g. Calibration_Michel), default = Calibration_Michel IniStates (optional) [numeric] object class IniStates [mm °C], see CreateIniStates details IniResLevels (optional) [numeric] vector initial fillings GR stores (4 values; use NA relevant given model) [- /mm]. See details","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/calib_GR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate GR model — calib_GR","text":"list airGR calibration outputs.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/convert_era5_ncdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ERA5 netCDF files to AEME or LER — convert_era5_ncdf","title":"Convert ERA5 netCDF files to AEME or LER — convert_era5_ncdf","text":"Convert ERA5 netCDF files AEME LakeEnsemblR formats.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/convert_era5_ncdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ERA5 netCDF files to AEME or LER — convert_era5_ncdf","text":"","code":"convert_era5_ncdf(   lat,   lon,   variable = c(\"10m_u_component_of_wind\", \"10m_v_component_of_wind\",     \"2m_dewpoint_temperature\", \"2m_temperature\", \"snowfall\", \"surface_pressure\",     \"surface_solar_radiation_downwards\", \"surface_thermal_radiation_downwards\",     \"total_precipitation\"),   year = 2022,   site = \"test\",   path = \".\",   format = \"AEME\" )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/convert_era5_ncdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ERA5 netCDF files to AEME or LER — convert_era5_ncdf","text":"lat numeric; latitude lon numeric; longitude variable string ERA5 variable names e.g. \"2m_temperature\", \"total_precipitation\" year numeric; vector years site string site name used downloading data. path filepath downloaded ERA5 ncdf files stored. format string; Either \"AEME\" \"LER\". Default \"AEME\".","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/create_linz_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Create LINZ API key — create_linz_key","title":"Create LINZ API key — create_linz_key","text":"function open browser window create LINZ account obtain API key. API key copied clipboard can added environment variables using add_linz_key() function.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/create_linz_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create LINZ API key — create_linz_key","text":"","code":"create_linz_key()"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/download_era5_ncdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Download ERA5 netCDF files — download_era5_ncdf","title":"Download ERA5 netCDF files — download_era5_ncdf","text":"Download ERA5 meteorological data Copernicus Data Store (CDS). Create free CDS user account self registering. user account verified can get personal user ID key visiting user profile.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/download_era5_ncdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download ERA5 netCDF files — download_era5_ncdf","text":"","code":"download_era5_ncdf(   lat,   lon,   variable = c(\"10m_u_component_of_wind\", \"10m_v_component_of_wind\",     \"2m_dewpoint_temperature\", \"2m_temperature\", \"snowfall\", \"surface_pressure\",     \"surface_solar_radiation_downwards\", \"surface_thermal_radiation_downwards\",     \"total_precipitation\"),   year = 2022,   month = 1:12,   site = \"test\",   user = NULL,   era5_dataset = \"reanalysis-era5-land\",   path = \".\",   job = TRUE )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/download_era5_ncdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download ERA5 netCDF files — download_era5_ncdf","text":"lat numeric; latitude lon numeric; longitude variable vecto;r string ERA5 variable names e.g. \"2m_temperature\", \"total_precipitation\" year numeric; year vector years. month numeric; month vector months. Defaults 1:12. site string site name appended file user user ID linked Copernicus account era5_dataset string; ERA5 dataset use. Can 'reanalysis-era5-single-levels' 'reanalysis-era5-land' path filepath store downloaded file job logical; send request background job RStudio. works RStudio. Default = TRUE.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/download_era5_ncdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download ERA5 netCDF files — download_era5_ncdf","text":"","code":"if (FALSE) { path <- 'era5_folder' site <- 'lake' ecmwfr::wf_set_key(user = '123456',                    key = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX',                    service = 'cds')  download_era5(lat = lat, lon = lon, year = 2022,               user = user, path = path) met <- convert_era5(lat = lat, lon = lon, year = 2022,                     site = site, path = path) }"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/era5_ref_table.html","id":null,"dir":"Reference","previous_headings":"","what":"ERA5 reference table — era5_ref_table","title":"ERA5 reference table — era5_ref_table","text":"reference table variable names ERA5, LER AEME.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/era5_ref_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ERA5 reference table — era5_ref_table","text":"","code":"era5_ref_table"},{"path":[]},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/era5_ref_table.html","id":"era-ref-table","dir":"Reference","previous_headings":"","what":"era5_ref_table","title":"ERA5 reference table — era5_ref_table","text":"data frame 9 rows 6 columns: variable Variable name era5 ERA5 variable names nc ERA nc variable names ler LakeEnsemblR variable names aeme AEME variable names nc ERA nc variable names","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/era5_ref_table.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ERA5 reference table — era5_ref_table","text":"Package development.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_dem_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DEM value for a given latitude and longitude — get_dem_value","title":"Get DEM value for a given latitude and longitude — get_dem_value","text":"function uses LINZ data service obtain elevation value given latitude longitude. function get_raster_layer_value() used obtain value DEM layer (ID: 51768).","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_dem_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DEM value for a given latitude and longitude — get_dem_value","text":"","code":"get_dem_value(lat, lon, key = NULL)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_dem_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DEM value for a given latitude and longitude — get_dem_value","text":"lat numeric; Latitude lon numeric; Longitude key character; LINZ API key. can set environment variable using add_linz_key() function passed character. See ?add_linz_key information setting API key.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_dem_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get DEM value for a given latitude and longitude — get_dem_value","text":"numeric value NA outside extent","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_era5_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract data from ERA5 RDS and format for `LakeEnsemblR``` — get_era5_point","title":"Extract data from ERA5 RDS and format for `LakeEnsemblR``` — get_era5_point","text":"Extract met data frame closest grid lat & lon","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_era5_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract data from ERA5 RDS and format for `LakeEnsemblR``` — get_era5_point","text":"","code":"get_era5_point(   lat,   lon,   years,   variables,   format = \"aeme\",   parallel = FALSE,   ncores )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_era5_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract data from ERA5 RDS and format for `LakeEnsemblR``` — get_era5_point","text":"lat numeric; Latitude lon numeric; Longitude years numeric; vector years numeric form extracted variables vector; lookup table variable names format string; format column headers. Can \"aeme\" \"ler\". Defaults \"aeme\". parallel boolean; parallelise download ERA5 variables. Defaults FALSE. ncores integer; number cores use parallelisation. missing, defaults min(c(parallel::detectCores() - 1, length(variables)))","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_era5_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract data from ERA5 RDS and format for `LakeEnsemblR``` — get_era5_point","text":"dataframe daily ERA5 data.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_linz_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LINZ data as sf object — get_linz_sf","title":"Get LINZ data as sf object — get_linz_sf","text":"Get LINZ data sf object","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_linz_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LINZ data as sf object — get_linz_sf","text":"","code":"get_linz_sf(url, layer_id, key = NULL)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_linz_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LINZ data as sf object — get_linz_sf","text":"url character, URL LINZ API layer_id numeric; layer ID value raster layer LINZ data service. See https://data.linz.govt.nz/ key character; LINZ API key. can set environment variable using add_linz_key() function passed character. See ?add_linz_key information setting API key.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_linz_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LINZ data as sf object — get_linz_sf","text":"sf object","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parameter values from calibration results — get_param","title":"Get parameter values from calibration results — get_param","text":"Get parameter values calibration results","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parameter values from calibration results — get_param","text":"","code":"get_param(calib, model, na_value, fit_col = \"fit\", best = FALSE)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parameter values from calibration results — get_param","text":"calib data frame calibration results. model character vector model name. na_value numeric value corresponds NA value used calibration. fit_col character; name column containing fit values. Default \"fit\". best logical value indicating whether return best parameter values parameter values.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parameter values from calibration results — get_param","text":"data frame parameter values.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_raster_layer_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Get raster layer value for a given latitude and longitude — get_raster_layer_value","title":"Get raster layer value for a given latitude and longitude — get_raster_layer_value","text":"Get raster layer value given latitude longitude","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_raster_layer_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get raster layer value for a given latitude and longitude — get_raster_layer_value","text":"","code":"get_raster_layer_value(lat, lon, layer_id, key = NULL)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_raster_layer_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get raster layer value for a given latitude and longitude — get_raster_layer_value","text":"lat numeric; Latitude lon numeric; Longitude layer_id numeric; layer ID value raster layer LINZ data service. See https://data.linz.govt.nz/ key character; LINZ API key. can set environment variable using add_linz_key() function passed character. See ?add_linz_key information setting API key.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_raster_layer_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get raster layer value for a given latitude and longitude — get_raster_layer_value","text":"numeric value NA outside extent","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_raster_tile.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a raster tile from LINZ — get_raster_tile","title":"Get a raster tile from LINZ — get_raster_tile","text":"Get raster tile LINZ","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_raster_tile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a raster tile from LINZ — get_raster_tile","text":"","code":"get_raster_tile(shape, layer_id, zoom = 15, key = NULL, verbose = FALSE)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_raster_tile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a raster tile from LINZ — get_raster_tile","text":"shape sf object single point polygon. layer_id numeric; layer ID value raster layer LINZ data service. See https://data.linz.govt.nz/ zoom numeric; zoom level tile. Default 15. key character; LINZ API key. NULL, look key LINZ_KEY environment variable. set, throw error. Use add_linz_key function set key. @importFrom maptiles create_provider get_tiles @importFrom terra subset","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_raster_tile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a raster tile from LINZ — get_raster_tile","text":"raster object","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_upstream_rec.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all upstream reaches — get_upstream_rec","title":"Get all upstream reaches — get_upstream_rec","text":"Get upstream reaches","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_upstream_rec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all upstream reaches — get_upstream_rec","text":"","code":"get_upstream_rec(HydroID, reaches)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_upstream_rec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all upstream reaches — get_upstream_rec","text":"HydroID numeric; identifier target reach reaches sf dataframe; reaches HydroID's","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_upstream_rec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all upstream reaches — get_upstream_rec","text":"sf dataframe upstream reaches","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_wlevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get modelled water level — get_wlevel","title":"Get modelled water level — get_wlevel","text":"Get modelled water level","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_wlevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get modelled water level — get_wlevel","text":"","code":"get_wlevel(lake_dir, model, nlev, return_df = FALSE)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_wlevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get modelled water level — get_wlevel","text":"lake_dir lake directory model string; model name. nlev numeric; number levels extract. return_df logical; return dataframe water level. Default FALSE.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/get_wlevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get modelled water level — get_wlevel","text":"dataframe water level.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/gotm_wet_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataframe used for calibrating the biogeochemistry in the GOTM-WET\r\nmodel. — gotm_wet_parameters","title":"Example dataframe used for calibrating the biogeochemistry in the GOTM-WET\r\nmodel. — gotm_wet_parameters","text":"parameters within fabm.yaml file. includes three phytoplankton groups (greens, cyanobacteria diatoms), one zooplankton group (cladocerans). values default file 25 % parameter ranges sensitivity analysis.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/gotm_wet_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataframe used for calibrating the biogeochemistry in the GOTM-WET\r\nmodel. — gotm_wet_parameters","text":"","code":"gotm_wet_parameters"},{"path":[]},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/gotm_wet_parameters.html","id":"gotm-wet-parameters","dir":"Reference","previous_headings":"","what":"gotm_wet_parameters","title":"Example dataframe used for calibrating the biogeochemistry in the GOTM-WET\r\nmodel. — gotm_wet_parameters","text":"data frame 182 rows 7 columns: model Model parameter file File parameter stored name Name parameter value Value parameter min Minimum range parameter max Maximum range parameter var Maximum range parameter","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/gotm_wet_parameters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example dataframe used for calibrating the biogeochemistry in the GOTM-WET\r\nmodel. — gotm_wet_parameters","text":"Package development.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/make_GR_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Make inputs for the GR models — make_GR_inputs","title":"Make inputs for the GR models — make_GR_inputs","text":"Make inputs GR models","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/make_GR_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make inputs for the GR models — make_GR_inputs","text":"","code":"make_GR_inputs(   id,   reaches,   lake,   catchments,   obs_flow = NULL,   met,   lat = NULL,   FUN_MOD = airGR::RunModel_GR6J,   plot = FALSE )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/make_GR_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make inputs for the GR models — make_GR_inputs","text":"id numeric; Reach ID reaches sf; object reaches linestrings. lake sf; polygon lake shore. catchments sf; polygon catchmentss. obs_flow dataframe; containing Date flow m3/s. met dataframe; containing Date, air temperature precipitation lat numeric; latitude. NULL, uses latitude centre lake. FUN_MOD function airGR package used. Defaults airGR::RunModel_GR6J plot logical; plot reaches, lake catchment? Defaults FALSE.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/make_GR_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make inputs for the GR models — make_GR_inputs","text":"list inputs run_GR().","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/nz_aerial_imagery_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"sf object of aerial imagery metadata for New Zealand. — nz_aerial_imagery_metadata","title":"sf object of aerial imagery metadata for New Zealand. — nz_aerial_imagery_metadata","text":"can used query aerial imagery coverage metadata New Zealand.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/nz_aerial_imagery_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sf object of aerial imagery metadata for New Zealand. — nz_aerial_imagery_metadata","text":"","code":"nz_aerial_imagery_metadata"},{"path":[]},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/nz_aerial_imagery_metadata.html","id":"nz-aerial-imagery-metadata","dir":"Reference","previous_headings":"","what":"nz_aerial_imagery_metadata","title":"sf object of aerial imagery metadata for New Zealand. — nz_aerial_imagery_metadata","text":"sf data frame 230 rows 8 columns: layer_id Layer ID aerial imagery title Title aerial imagery abstract Abstract aerial imagery region Region aerial imagery res Resolution aerial imagery. Units denoted units column. units Units resolution aerial imagery year Year aerial imagery geometry Geometry aerial imagery","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/nz_aerial_imagery_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"sf object of aerial imagery metadata for New Zealand. — nz_aerial_imagery_metadata","text":"Package development.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/nz_dem_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"sf object of Digital Elevation Model (DEM) metadata for New Zealand. — nz_dem_metadata","title":"sf object of Digital Elevation Model (DEM) metadata for New Zealand. — nz_dem_metadata","text":"can used query DEM coverage metadata New Zealand.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/nz_dem_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sf object of Digital Elevation Model (DEM) metadata for New Zealand. — nz_dem_metadata","text":"","code":"nz_dem_metadata"},{"path":[]},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/nz_dem_metadata.html","id":"nz-dem-metadata","dir":"Reference","previous_headings":"","what":"nz_dem_metadata","title":"sf object of Digital Elevation Model (DEM) metadata for New Zealand. — nz_dem_metadata","text":"sf data frame 230 rows 8 columns: layer_id Layer ID DEM title Title DEM abstract Abstract DEM region Region DEM res Resolution DEM. Units denoted units column. units Units resolution DEM year Year DEM geometry Geometry DEM","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/nz_dem_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"sf object of Digital Elevation Model (DEM) metadata for New Zealand. — nz_dem_metadata","text":"Package development.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_calib.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot calibration results — plot_calib","title":"Plot calibration results — plot_calib","text":"Plot calibration results","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_calib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot calibration results — plot_calib","text":"","code":"plot_calib(   calib,   model,   na_value,   fit_col = \"fit\",   nrow = 2,   base_size = 8,   return_pars = FALSE )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_calib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot calibration results — plot_calib","text":"calib dataframe; output read_calib model string; model. Options c(\"dy_cd\", \"glm_aed\" \"gotm_wet\") na_value numeric; value replace NA values fit_col character; name column containing fit values. Default \"fit\". nrow integer; number rows plot base_size numeric; base size theme return_pars logical; return parameter values","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_calib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot calibration results — plot_calib","text":"list plots","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_multiscatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot multiscatter of the parameters against each other — plot_multiscatter","title":"Plot multiscatter of the parameters against each other — plot_multiscatter","text":"Plot multiscatter parameters ","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_multiscatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot multiscatter of the parameters against each other — plot_multiscatter","text":"","code":"plot_multiscatter(sa)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_multiscatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot multiscatter of the parameters against each other — plot_multiscatter","text":"sa list; sensitivity analysis results read read_sa","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_multiscatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot multiscatter of the parameters against each other — plot_multiscatter","text":"list ggplot objects","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the scatter of the output of a sensitivity analysis — plot_scatter","title":"Plot the scatter of the output of a sensitivity analysis — plot_scatter","text":"Plot scatter output sensitivity analysis","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the scatter of the output of a sensitivity analysis — plot_scatter","text":"","code":"plot_scatter(sa)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the scatter of the output of a sensitivity analysis — plot_scatter","text":"sa list; sensitivity analysis results read read_sa","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the scatter of the output of a sensitivity analysis — plot_scatter","text":"ggplot object","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_sobol.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of first, total, second, third and fourth-order Sobol' indices — plot_sobol","title":"Visualization of first, total, second, third and fourth-order Sobol' indices — plot_sobol","text":"Visualization first, total, second, third fourth-order Sobol' indices","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_sobol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of first, total, second, third and fourth-order Sobol' indices — plot_sobol","text":"","code":"plot_sobol(sa)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_sobol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of first, total, second, third and fourth-order Sobol' indices — plot_sobol","text":"sa list; sensitivity analysis results read read_sa","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_sobol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of first, total, second, third and fourth-order Sobol' indices — plot_sobol","text":"list ggplot objects","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_uncertainty.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the uncertainty of the output of a sensitivity analysis — plot_uncertainty","title":"Plot the uncertainty of the output of a sensitivity analysis — plot_uncertainty","text":"Plot uncertainty output sensitivity analysis","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_uncertainty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the uncertainty of the output of a sensitivity analysis — plot_uncertainty","text":"","code":"plot_uncertainty(sa, bins = 30)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_uncertainty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the uncertainty of the output of a sensitivity analysis — plot_uncertainty","text":"sa list; sensitivity analysis results read read_sa bins integer; number bins histogram. Default 30.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/plot_uncertainty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the uncertainty of the output of a sensitivity analysis — plot_uncertainty","text":"ggplot object","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/read_calib.html","id":null,"dir":"Reference","previous_headings":"","what":"Read calibration output — read_calib","title":"Read calibration output — read_calib","text":"Read calibration output","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/read_calib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read calibration output — read_calib","text":"","code":"read_calib(ctrl, model, name = \"calib_output\", path = \".\", raw = FALSE)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/read_calib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read calibration output — read_calib","text":"ctrl list; controls calibration function. VTR Value reached. optimization process stop either maximum number iterations itermax reached best parameter vector bestmem found value fn(bestmem) <= VTR. Default -Inf. NP number population members. Defaults NA; user change value NP NA reset 10 * sum(param$model == model). many  problems best set NP least 10 times length parameter vector. itermax maximum iteration (population generation) allowed. Default 200. reltol relative convergence tolerance. algorithm stops unable reduce value factor reltol * (abs(val) + reltol). Default = 0.07 cutoff: quantile cutoff used select parents next generation. example, cutoff = 0.25, best 25% population used parents next generation. mutate fraction population undergo mutation (0-1). parallel boolean; run calibration parallel. Default TRUE out_file filepath; csv calibration output written . Defaults \"results.csv\" na_value value replace NA values observations. Default  ncore: number cores use calibration. used parallel = TRUE. Default parallel::detectCores() - 1. model string; model. Options c(\"dy_cd\", \"glm_aed\" \"gotm_wet\") path filepath; input files located relative `config`. raw logical. TRUE, return raw calibration output dataframe \"fit\" \"gen\" columns. generally used restarting calibration.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/read_calib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read calibration output — read_calib","text":"data frame calibration results.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/read_sa.html","id":null,"dir":"Reference","previous_headings":"","what":"Read calibration output — read_sa","title":"Read calibration output — read_sa","text":"Read calibration output","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/read_sa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read calibration output — read_sa","text":"","code":"read_sa(ctrl, model, name = \"sa_output\", path = \".\", R = 2^3, boot = TRUE)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/read_sa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read calibration output — read_sa","text":"ctrl list; controls calibration function. VTR Value reached. optimization process stop either maximum number iterations itermax reached best parameter vector bestmem found value fn(bestmem) <= VTR. Default -Inf. NP number population members. Defaults NA; user change value NP NA reset 10 * sum(param$model == model). many  problems best set NP least 10 times length parameter vector. itermax maximum iteration (population generation) allowed. Default 200. reltol relative convergence tolerance. algorithm stops unable reduce value factor reltol * (abs(val) + reltol). Default = 0.07 cutoff: quantile cutoff used select parents next generation. example, cutoff = 0.25, best 25% population used parents next generation. mutate fraction population undergo mutation (0-1). parallel boolean; run calibration parallel. Default TRUE out_file filepath; csv calibration output written . Defaults \"results.csv\" na_value value replace NA values observations. Default  ncore: number cores use calibration. used parallel = TRUE. Default parallel::detectCores() - 1. model string; model. Options c(\"dy_cd\", \"glm_aed\" \"gotm_wet\") path filepath; input files located relative `config`. R Positive integer, number bootstrap replicas. Default NULL. boot Logical. TRUE, function bootstraps Sobol' indices. FALSE, provides point estimates. Default boot = FALSE.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/read_sa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read calibration output — read_sa","text":"list thedata frame sensitivity analysis results sobol indices variable.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_aeme_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Run AEME with parameter dataframe — run_aeme_param","title":"Run AEME with parameter dataframe — run_aeme_param","text":"Run AEME parameter dataframe","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_aeme_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run AEME with parameter dataframe — run_aeme_param","text":"","code":"run_aeme_param(   aeme_data,   param,   model,   path,   mod_ctrls,   na_value = 999,   return_nc = FALSE,   return_aeme = FALSE )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_aeme_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run AEME with parameter dataframe — run_aeme_param","text":"aeme_data aeme; data object. param dataframe; parameters read csv file. Requires columns c(\"model\", \"file\", \"name\", \"value\", \"min\", \"max\", \"log\") model vector; models used. Can `dy_cd`, `glm_aed`, `gotm_wet`. path filepath; input files located relative `config`. mod_ctrls dataframe; configuration loaded \"mod_ctrls.csv\". na_value numeric; value return model run unsuccessful return_nc boolean; return netCDF file connection return_aeme boolean; return AEME object","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_aeme_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run AEME with parameter dataframe — run_aeme_param","text":"na_value model run unsuccessful","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_aeme_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Run AEME in a Shiny app — run_aeme_shiny","title":"Run AEME in a Shiny app — run_aeme_shiny","text":"Run AEME Shiny app","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_aeme_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run AEME in a Shiny app — run_aeme_shiny","text":"","code":"run_aeme_shiny(aeme_data, param, path, mod_ctrls)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_aeme_shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run AEME in a Shiny app — run_aeme_shiny","text":"aeme_data aeme; data object. path filepath; input files located relative `config`. mod_ctrls dataframe; configuration loaded \"mod_ctrls.csv\".","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_aeme_shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run AEME in a Shiny app — run_aeme_shiny","text":"Launches shiny app","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_and_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a model and calculate model fit. — run_and_fit","title":"Run a model and calculate model fit. — run_and_fit","text":"Run model calculate model fit.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_and_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a model and calculate model fit. — run_and_fit","text":"","code":"run_and_fit(   aeme_data,   param,   model,   vars_sim,   path,   mod_ctrls,   FUN_list = NULL,   weights,   na_value = 999,   var_indices = NULL,   return_indices = FALSE,   include_wlev = FALSE,   return_df = FALSE,   method = \"calib\",   sa_ctrl = NULL,   fit = TRUE )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_and_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a model and calculate model fit. — run_and_fit","text":"aeme_data aeme; data object. param dataframe; parameters read csv file. Requires columns c(\"model\", \"file\", \"name\", \"value\", \"min\", \"max\", \"log\") model string; model. Options c(\"dy_cd\", \"glm_aed\" \"gotm_wet\") vars_sim vector; variables names used calculation model fit. Currently supports using one variable. path filepath; input files located relative `config`. mod_ctrls dataframe; configuration loaded \"mod_ctrls.csv\". FUN_list function; form function(O, P) used calculate model fit. NULL, uses mean absolute error (MAE). weights vector; weights used calculation model fit. na_value numeric; value returned model fails run. var_indices list; generated running run_and_fit() return indices = TRUE first simulation. return_indices boolean; return indices (depths, time dates) variable. Used running calibration time period change simulations. include_wlev boolean; include water level calculation model fit. return_df boolean; return dataframe modelled observed. method string; method model run. Options c(\"sa\", \"calib\"). fit boolean; fit model . FALSE, return netCDF file connection.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_and_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a model and calculate model fit. — run_and_fit","text":"single value model fit, calculated FUN_list.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_GR.html","id":null,"dir":"Reference","previous_headings":"","what":"Run GR model — run_GR","title":"Run GR model — run_GR","text":"Run GR model","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_GR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run GR model — run_GR","text":"","code":"run_GR(   inputs,   param,   warmup = NULL,   run_index,   IniStates = NULL,   IniResLevels = NULL )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_GR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run GR model — run_GR","text":"inputs list; inputs generated make_GR_inputs(). param vector; parameters. Usually generated calib_GR(). warmup vector; index inputs$data used warmup period model. run_index vector; index inputs$data used running GR model. IniStates (optional) [numeric] object class IniStates [mm °C], see CreateIniStates details IniResLevels (optional) [numeric] vector initial fillings GR stores (4 values; use NA relevant given model) [- /mm]. See details","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/run_GR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run GR model — run_GR","text":"list GR model output.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/sa_aeme.html","id":null,"dir":"Reference","previous_headings":"","what":"Run sensitivity analysis on AEME model parameters — sa_aeme","title":"Run sensitivity analysis on AEME model parameters — sa_aeme","text":"calib_model() runs model compares observations provided. can run parallel using multiple cores availlable computer run quicker.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/sa_aeme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run sensitivity analysis on AEME model parameters — sa_aeme","text":"","code":"sa_aeme(   aeme_data,   path = \".\",   param,   model,   mod_ctrls,   FUN_list = NULL,   ctrl = NULL,   param_df = NULL )"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/sa_aeme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run sensitivity analysis on AEME model parameters — sa_aeme","text":"aeme_data aeme; data object. path filepath; input files located relative `config`. param dataframe; parameters read csv file. Requires columns c(\"model\", \"file\", \"name\", \"value\", \"min\", \"max\", \"log\") model string; model. Options c(\"dy_cd\", \"glm_aed\" \"gotm_wet\") mod_ctrls dataframe; configuration loaded \"mod_ctrls.csv\". FUN_list list functions; named according variables vars_sim. Funtions form function(df) used calculate model fit. NULL, uses mean absolute error (MAE). ctrl list; controls calibration function. control parameters follows: N: initial sample size base sample matrix. ncore: number cores use calibration. used parallel = TRUE. Default parallel::detectCores() - 1. na_value: value replace NA value returned. parallel: Logical value. TRUE, sensitivity analysis run parallel. FALSE, run series. out_file: character string naming file writing. Currently can write .csv file database (.db; using duckDB package) file. writing database, creates table named \"sa_output\". vars_sim: named list output variables sensitivity analysis. name user defined list must contain: var: variable name use sensitivity analysis. month: vector months use sensitivity analysis. depth_range: vector length 2 minimum maximum depth range use sensitivity analysis. param_df dataframe; parameters read csv file. Requires columns c(\"model\", \"file\", \"name\", \"value\", \"min\", \"max\").","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/sa_aeme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run sensitivity analysis on AEME model parameters — sa_aeme","text":"list; ctrl supplied updated arguments missing.","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/sa_aeme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run sensitivity analysis on AEME model parameters — sa_aeme","text":"","code":"if (FALSE) {   # Run sensitivity analysis   tmpdir <- tempdir()   aeme_dir <- system.file(\"extdata/lake/\", package = \"AEME\")   # Copy files from package into tempdir   file.copy(aeme_dir, tmpdir, recursive = TRUE)   path <- file.path(tmpdir, \"lake\")   aeme_data <- AEME::yaml_to_aeme(path = path, \"aeme.yaml\")   mod_ctrls <- read.csv(file.path(path, \"model_controls.csv\"))   inf_factor = c(\"dy_cd\" = 1, \"glm_aed\" = 1, \"gotm_wet\" = 1)   outf_factor = c(\"dy_cd\" = 1, \"glm_aed\" = 1, \"gotm_wet\" = 1)   model <- c(\"glm_aed\")   aeme_data <- AEME::build_ensemble(path = path, aeme_data = aeme_data,                                     model = model, mod_ctrls = mod_ctrls,                                     inf_factor = inf_factor, ext_elev = 5,                                     use_bgc = FALSE)    # Load parameters   utils::data(\"aeme_parameters\", package = \"aemetools\")   param <- aeme_parameters |>     dplyr::filter(file != \"wdr\")    # Function to calculate fitness   fit <- function(df) {     mean(df$model)   }    # Assign function to variable   FUN_list <- list(HYD_temp = fit)    # Set up control parameters for surface and bottom temperature   ctrl <- list(N = 2^3, ncore = 2L, na_value = 999, parallel = TRUE,                out_file = \"results.db\",                vars_sim = list(                  surf_temp = list(var = \"HYD_temp\",                                   month = c(10:12, 1:3),                                   depth_range = c(0, 2)                  ),                  bot_temp = list(var = \"HYD_temp\",                                  month = c(10:12, 1:3),                                  depth_range = c(10, 13)                  )                )   )    # Run sensitivity analysis AEME model   ctrl <- sa_aeme(aeme_data = aeme_data, path = path, param = param,                   model = model, ctrl = ctrl, mod_ctrls = mod_ctrls,                   FUN_list = FUN_list) }"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/update_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Update parameter values in param based on best_pars — update_param","title":"Update parameter values in param based on best_pars — update_param","text":"Update parameter values param based best_pars","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/update_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update parameter values in param based on best_pars — update_param","text":"","code":"update_param(param, best_pars)"},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/update_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update parameter values in param based on best_pars — update_param","text":"param data frame parameters update best_pars data frame best parameters get_param","code":""},{"path":"https://special-enigma-8p9lgre.pages.github.io/reference/update_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update parameter values in param based on best_pars — update_param","text":"data frame updated parameter values running model run_aeme_param","code":""}]
